---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Welcome to Astro.">
	<main>
	</main>
</Layout>
<script>
  let shouldScrollToBottom = false;
  let scrollonce = false;

  function scrolloncefunc() {
    shouldScrollToBottom = true;
    scrollonce = true;
  }

  document.getElementById("skiptobutton")!.addEventListener("click", scrolloncefunc);

  const worker = new Worker('colorWorker.js');
  const colorContainer = document.body;

  let currentType = 'blues'; // Start with blues
  let currentIndex = 0; // Start index for the current section
  const batchSize = 256; // Number of colors per batch

  worker.onmessage = function (event) {
    const { colors, type, nextIndex } = event.data;

    // Render the batch of colors
    const fragment = document.createDocumentFragment();
    colors.forEach((color: string, id: any) => {
      const colorBox = document.createElement('div');
      colorBox.className = 'color-box';
      colorBox.style.backgroundColor = color;
      colorBox.innerText = color;
      colorBox.addEventListener('click', () => copyToClipboard(color));
      fragment.appendChild(colorBox);
    });

    colorContainer.appendChild(fragment);

    if (shouldScrollToBottom) {
      window.scrollTo({ top: document.body.scrollHeight });
      if (scrollonce) {
        shouldScrollToBottom = false;
        scrollonce = false;
      }
    }

    // Continue generating the current section or move to the next
    if (nextIndex < getMaxIndex(type)!) {
      currentIndex = nextIndex;
      worker.postMessage({ type: currentType, startIndex: currentIndex, batchSize });
    } else {
      if (currentType === 'blues') currentType = 'greens';
      else if (currentType === 'greens') currentType = 'reds';
      else return; // All sections are done

      currentIndex = 0;
      worker.postMessage({ type: currentType, startIndex: currentIndex, batchSize });
    }
  };

  function getMaxIndex(type: string) {
    if (type === 'blues') return 256; // b = 0 to 255
    if (type === 'greens') return 256 * 256; // g = 1 to 255, b = 0 to 255
    if (type === 'reds') return 256 * 256 * 256; // r = 1 to 255, g = 0 to 255, b = 0 to 255
  }

  function generateColors() {
    worker.postMessage({ type: currentType, startIndex: currentIndex, batchSize });
  }

  async function copyToClipboard(text: string) {
    try {
      await navigator.clipboard.writeText(text);
      console.log('Text copied to clipboard');
    } catch (err) {
      console.error('Unable to copy text to clipboard', err);
    }
  }

  generateColors();
</script>
